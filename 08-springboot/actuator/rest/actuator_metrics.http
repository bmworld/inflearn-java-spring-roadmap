
### APP metric 정보 확인
GET {{origin}}/actuator/metrics

#{
#  "names": [
#    "application.ready.time",
#    "application.started.time",
#    "disk.free",
#    "disk.total",
#    "executor.active",
#    "executor.completed",
#    "executor.pool.core",
#    "executor.pool.max",
#    "executor.pool.size",
#    "executor.queue.remaining",
#    "executor.queued",
#    "hikaricp.connections",
#    "hikaricp.connections.acquire",
#    "hikaricp.connections.active",
#    "hikaricp.connections.creation",
#    "hikaricp.connections.idle",
#    "hikaricp.connections.max",
#    "hikaricp.connections.min",
#    "hikaricp.connections.pending",
#    "hikaricp.connections.timeout",
#    "hikaricp.connections.usage",
#    "http.server.requests",
#    "http.server.requests.active",
#    "jdbc.connections.active",
#    "jdbc.connections.idle",
#    "jdbc.connections.max",
#    "jdbc.connections.min",
#    "jvm.buffer.count",
#    "jvm.buffer.memory.used",
#    "jvm.buffer.total.capacity",
#    "jvm.classes.loaded",
#    "jvm.classes.unloaded",
#    "jvm.compilation.time",
#    "jvm.gc.live.data.size",
#    "jvm.gc.max.data.size",
#    "jvm.gc.memory.allocated",
#    "jvm.gc.memory.promoted",
#    "jvm.gc.overhead",
#    "jvm.gc.pause",
#    "jvm.info",
#    "jvm.memory.committed",
#    "jvm.memory.max",
#    "jvm.memory.usage.after.gc",
#    "jvm.memory.used",
#    "jvm.threads.daemon",
#    "jvm.threads.live",
#    "jvm.threads.peak",
#    "jvm.threads.states",
#    "logback.events",
#    "process.cpu.usage",
#    "process.files.max",
#    "process.files.open",
#    "process.start.time",
#    "process.uptime",
#    "system.cpu.count",
#    "system.cpu.usage",
#    "system.load.average.1m",
#    "tomcat.sessions.active.current",
#    "tomcat.sessions.active.max",
#    "tomcat.sessions.alive.max",
#    "tomcat.sessions.created",
#    "tomcat.sessions.expired",
#    "tomcat.sessions.rejected"
#  ]
#}

### APP metric 정보 확인 > 세부내역 > cpu 사용량
GET {{origin}}/actuator/metrics/system.cpu.usage

### APP metric 정보 확인 > 세부내역 > cpu 개
GET {{origin}}/actuator/metrics/system.cpu.count


### Metrics > heap memory 확인하기
GET {{origin}}/actuator/metrics/jvm.memory.used?tag:heap


### Metrics > http request 확인 (*WAS에 대한 Request 없으면 404)
GET {{origin}}/actuator/metrics/http.server.requests

###
GET {{origin}}/actuator/metrics/http.server.max


### Metrics > http request 확인 1 (특정 uri / 상태코드 / ...)
GET {{origin}}/actuator/metrics/http.server.requests?tag=uri:/log&tag=status:200

### Metrics > http request 확인 2 (특정 uri / 상태코드 / ...)
GET {{origin}}/actuator/metrics/http.server.requests?tag=method:POST


### Metrics > App 시작 소요시간 (`ApplicationReadyEvent` 로 측정함)
GET {{origin}}/actuator/metrics/application.started.time


### Metrics > App 이 Http 요청처리 준비까지 소요된 시간 (`ApplicationReadyEvent` 로 측정함)
GET {{origin}}/actuator/metrics/application.ready.time


### Metrics > JDDB > 활성중인 Connection 수
GET {{origin}}/actuator/metrics/jdbc.connections.active


### Metrics > JDDB > 최대 Connection Count
GET {{origin}}/actuator/metrics/jdbc.connections.max
